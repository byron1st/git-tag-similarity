// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../mocks/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	plumbing "github.com/go-git/go-git/v5/plumbing"
	object "github.com/go-git/go-git/v5/plumbing/object"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FetchAllTags mocks base method.
func (m *MockRepository) FetchAllTags() ([]*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllTags")
	ret0, _ := ret[0].([]*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllTags indicates an expected call of FetchAllTags.
func (mr *MockRepositoryMockRecorder) FetchAllTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllTags", reflect.TypeOf((*MockRepository)(nil).FetchAllTags))
}

// GetCommitObject mocks base method.
func (m *MockRepository) GetCommitObject(hash plumbing.Hash) (*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitObject", hash)
	ret0, _ := ret[0].(*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitObject indicates an expected call of GetCommitObject.
func (mr *MockRepositoryMockRecorder) GetCommitObject(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitObject", reflect.TypeOf((*MockRepository)(nil).GetCommitObject), hash)
}

// GetCommitSetForTag mocks base method.
func (m *MockRepository) GetCommitSetForTag(ref *plumbing.Reference) (map[plumbing.Hash]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitSetForTag", ref)
	ret0, _ := ret[0].(map[plumbing.Hash]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitSetForTag indicates an expected call of GetCommitSetForTag.
func (mr *MockRepositoryMockRecorder) GetCommitSetForTag(ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitSetForTag", reflect.TypeOf((*MockRepository)(nil).GetCommitSetForTag), ref)
}
